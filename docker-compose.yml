services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-wishlist}
      POSTGRES_USER: ${POSTGRES_USER:-wishlist}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-wishlist}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-wishlist} -d ${POSTGRES_DB:-wishlist}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7
    command: ["redis-server", "--save", "", "--appendonly", "no"]

  migrations:
    build: ./backend
    env_file: .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    command: ["alembic", "upgrade", "head"]

  backend:
    build: ./backend
    env_file: .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./backend/app:/app/app
      - ./media:/app/media
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

  worker:
    build: ./backend
    env_file: .env
    environment:
      - PYTHONPATH=/app
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
    command: ["celery", "-A", "app.worker.celery_app", "worker", "--loglevel=INFO"]

  frontend:
    build: ./frontend
    env_file: .env
    depends_on:
      backend:
        condition: service_started
    volumes:
      - ./frontend:/usr/src/app
      - /usr/src/app/node_modules
    command: >
      sh -c "npm install && npm run build -- --watch"

  nginx:
    image: nginx:1.27
    depends_on:
      frontend:
        condition: service_started
      backend:
        condition: service_started
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./media:/usr/share/nginx/media:ro
      - ./yafoxin.ru_cert.pem:/etc/nginx/ssl/fullchain.pem:ro
      - ./yafoxin.ru_private_key.pem:/etc/nginx/ssl/privkey.pem:ro
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

volumes:
  pgdata:
